val loadfile = sc.textFile("hdfs://localhost:9000/user/gg7hz/InputFolder/input.txt"); 
val userFriends = loadfile.flatMap(line => { val parts = line.split("\\t"); if (parts.length < 2) None else try { val user = parts(0).trim.toInt; val friends = parts(1).split(",").map(_.trim.toInt).toSet; Some((user, friends)) } catch { case _: NumberFormatException => None }}); 
val friendsOfFriends = userFriends.flatMap { case (user, friends) => friends.flatMap(friend => friends.map(fof => (friend, fof))).filter { case (friend, fof) => friend != fof }}; 
val directFriends = userFriends.flatMap { case (user, friends) => friends.map(friend => (user, friend)) }; 
val indirectFriends = friendsOfFriends.subtract(directFriends); 
val groupedFriends = indirectFriends.groupByKey().mapValues(_.toSet); 
val potentialFriendsCount = groupedFriends.mapValues(_.size); 
val topUsers = potentialFriendsCount.top(10)(Ordering.by(_._2)).map(_._1); 
val topUsersSet = topUsers.toSet; 
val filteredUserFriends = userFriends.filter { case (user, _) => topUsersSet.contains(user) }; 
val filteredUserFriendsArray = filteredUserFriends.collect(); 
val pairs = for { i <- filteredUserFriendsArray.indices; j <- (i + 1) until filteredUserFriendsArray.length } yield { val (user1, friends1) = filteredUserFriendsArray(i); val (user2, friends2) = filteredUserFriendsArray(j); (user1, user2, friends1.intersect(friends2).size) }; 
val validPairs = pairs.filter { case (_, _, sharedCount) => sharedCount > 10 && sharedCount < 100 }; 
val formattedValidPairs = validPairs.map { case (user1, user2, count) => s"$user1\t$user2\t$count" }.sortBy(_.split("\t")(0).toInt); 
val formattedValidPairsRDD = sc.parallelize(formattedValidPairs) // Convert to RDD
formattedValidPairsRDD.coalesce(1).saveAsTextFile("hdfs://localhost:9000/user/gg7hz/OutputFolder/")
