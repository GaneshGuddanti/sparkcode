// Load the input file
val loadfile = sc.textFile("hdfs://localhost:9000/user/gg7hz/InputFolder/input.txt")

// Record start time
val startTime = System.currentTimeMillis()

val userFriends = loadfile.flatMap(line => {
    val parts = line.split("\\t")
    if (parts.length < 2) {
        None
    } else {
        try {
            val user = parts(0).trim.toInt
            val friends = parts(1).split(",").map(_.trim.toInt).toSet
            Some((user, friends))
        } catch {
            case e: NumberFormatException => None
        }
    }
})

val friendsOfFriends = userFriends.flatMap { case (user, friends) =>
    friends.flatMap(friend => friends.map(fof => (friend, fof)))
        .filter { case (friend, fof) => friend != fof }
}

val directFriends = userFriends.flatMap { case (user, friends) =>
    friends.map(friend => (user, friend))
}

val indirectFriends = friendsOfFriends.subtract(directFriends)

val groupedFriends = indirectFriends.groupByKey().mapValues(_.toSet)

val formattedOutput = groupedFriends.map { case (user, friends) =>
    val friendsList = friends.toList.sorted.mkString(",")
    s"$user\t$friendsList"
}.sortBy(_.split("\t")(0).toInt)

formattedOutput.coalesce(1).saveAsTextFile("hdfs://localhost:9000/user/gg7hz/OutputFolder/")

// Record end time
val endTime = System.currentTimeMillis()

// Calculate total execution time
val totalExecutionTime = endTime - startTime
println(s"Total execution time for Spark: $totalExecutionTime ms")
